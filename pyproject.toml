[build-system]
build-backend = "poetry.core.masonry.api"

requires = [ "poetry-core" ]

[tool.poetry]
name = "django-sage-auth"
version = "0.1.0"
description = "A project for handleing authentication processes"
authors = [ "Radin Ghahremani <radin@sageteam.org>", "Sepehr Akbarzadeh <sepehr@sageteam.org>" ]
keywords = [ "django", "auth", "sageteam", "django-packages" ]
license = "MIT"
repository = "https://github.com/sageteamorg/django-sage-auth"
readme = "README.md"

packages = [
  { include = "sage_auth" },
]

classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Framework :: Django",
  "Development Status :: 4 - Beta",

]
[tool.poetry.urls]
"Documentation" = "https://django-sage-auth.readthedocs.io/en/latest/"
"Source Code" = "https://github.com/sageteamorg/django-sage-auth"
"Issues" = "https://github.com/sageteamorg/django-sage-auth/issues"

[tool.poetry.dependencies]
python = "^3.10"
django = "^5.1.1"
django-sage-otp = "^0.1.0"
django-ratelimit = "^4.1.0"
python-sage-sms = "^0.1.1"
six = "^1.16.0"
smsir = "^1.0.5"
django-phonenumber-field = { extras = [ "phonenumbers" ], version = "^8.0.0" }

[tool.poetry.group.dev.dependencies]
bandit = { extras = [ "toml" ], version = "^1.7.9" }
ruff = "^0.6.5"
pre-commit = "^3.8.0"
tox = "^4.18.1"
pylint = "^3.2.7"
docformatter = "^1.7.5"
commitizen = "^3.29.0"
pytest = "^8.3.3"
pytest-django = "^4.9.0"
pytest-cov = "^5.0.0"
black = "^24.8.0"
isort = "^5.13.2"
pylint-django = "^2.5.5"
django-debug-toolbar = "^4.4.6"
sphinx = "^8.0.2"
sphinx-rtd-theme = "^3.0.1"

[tool.black]
line-length = 88
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | migrations
  | venv
  | env
  | __pycache__
  | static
  | media
  | node_modules
  | env
  | kernel
  | \.mypy_cache
  | \.pytest_cache
  | .*\.egg-info
)/
'''

[tool.ruff]
line-length = 88
exclude = [
  "*.egg-info/*",
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".venv/*",
  "__pycache__/*",
  "apps.py",
  "build/*",
  "dist/*",
  "migrations/*",
  "sage_shop/warehouse/schemas/*",
  "tests",
  "venv/*",
]

lint.select = [
  "B",   # Bugbear codes for potential issues
  "C90", # Custom error codes
  "E",   # PEP8 error codes
  "F",   # PyFlakes error codes
  "S",   # Security checks
]
lint.ignore = [
  "E203", # Ignore whitespace before ':', ';', or '#'
  "E501", # Ignore line length issues (lines longer than 88 characters)
]

[tool.isort]
profile = "black"
line_length = 88
skip = [
  "venv",
  ".venv",
  "build",
  "dist",
  ".git",
  "__pycache__",
  "*.egg-info",
  ".mypy_cache",
  ".pytest_cache",
  "migrations",
  "static",
  "media",
  "node_modules",
  "env",
  "kernel",
]

[tool.pylint]
disable = [
  "C0114", # Missing module docstring
  "C0115", # Missing class docstring
  "C0116", # Missing function or method docstring
  "E1101", # Instance of 'Foo' has no 'bar' member (Django dynamic attributes)
  "W0212", # Access to a protected member _foo of a client class
  "R0903", # Too few public methods (for Django models)
  "R0801", # Similar Codes
]
max-line-length = 88
ignore = [
  "migrations",
  "*/apps.py",
  ".venv/*",
  "build/*",
  "dist/*",
  ".git/*",
  "__pycache__/*",
  "*.egg-info/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  "tests",
]
load-plugins = [
  "pylint.extensions.docparams",
]
good-names = [
  "qs", # QuerySet abbreviation
  "pk", # Primary key abbreviation
  "id", # Identifier
]
suggestion-mode = true
const-rgx = "([A-Z_][A-Z0-9_]*)|(__.*__)"
attr-rgx = "[a-z_][a-z0-9_]{2,30}$"
variable-rgx = "[a-z_][a-z0-9_]{2,30}$"
argument-rgx = "[a-z_][a-z0-9_]{2,30}$"
method-rgx = "[a-z_][a-z0-9_]{2,30}$"
function-rgx = "[a-z_][a-z0-9_]{2,30}$"
class-rgx = "[A-Z_][a-zA-Z0-9]+$"
module-rgx = "(([a-z_][a-z0-9_]*)|(__.*__))$"

[tool.pytest.ini_options]
addopts = "--cov --cov-report=term-missing --cov-report=html --cov-fail-under=90"
DJANGO_SETTINGS_MODULE = "kernel.settings"
python_files = [ "tests.py", "test_*.py" ]
testpaths = [ "tests" ]
norecursedirs = [
  "migrations",
  "static",
  "media",
  "node_modules",
  "env",
  "venv",
  ".venv",
  "dist",
  "build",
  "kernel",
  "checks.py",
]

[tool.coverage.run]
omit = [
  "*/migrations/*",
  "kernel/*",
  "*/apps.py",
  "manage.py",
  "checks.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if self\\.debug",
  "raise AssertionError",
  "if 0:",
  "if __name__ == .__main__.:",
]

[tool.mypy]
mypy_path = "stubs"
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
explicit_package_bases = true
exclude = '''
^docs/source/conf.py|
^build/|
^tests/|
^stubs/|
^kernel/
'''

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"

[tool.commitizen.settings]
increment_types = [ "feat", "fix" ]

[tool.bandit]
targets = [ "./sage_shop" ]
exclude_dirs = [
  "tests",
  "migrations",
]
severity = "medium"
confidence = "medium"
max_lines = 500
progress = true
reports = true
output_format = "screen"
output_file = "bandit_report.txt"
include = [ "B101", "B102" ]
exclude_tests = [ "B301", "B302" ]

[tool.bandit.plugins]
B104 = { check_typed_list = true }
